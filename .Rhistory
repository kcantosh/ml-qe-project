dataset<-read.csv('Ox_svm1000.txt')
dataset
index <-1:nrow(dataset)
testindex<-sample(index,trunc(length(index)*30/100))
testset<-dataset[testindex,]
trainset<-dataset[-testindex,]
tuned<-tune.svm(V1~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
library(e1071)
tuned<-tune.svm(V1~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
names(dataset)
names(dataset)
tuned<-tune.svm(V1~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
names(dataset)
tuned<-tune(V1~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
dataset<-read.csv('Ox_svm1000.txt')
index <-1:nrow(dataset)
testindex<-sample(index,trunc(length(index)*30/100))
testset<-dataset[testindex,]
trainset<-dataset[-testindex,]
names(dataset)
tuned<-tune(X~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
tuned<-tune.svm(X~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
tuned<-tune.svm(X., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
dataset
dataset<-read.csv('Ox_svm1000.txt')
pca1=prcomp(dataset,scale.=TRUE)
sdev
pca1$sdev
library(ggplot2)
packages.install('ggplot2')
install.packages('ggplot2')
scores=as.data.frame(pca1$x)
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
  geom_hline(yintercept = 0, colour = "gray65") +
  geom_vline(xintercept = 0, colour = "gray65") +
  geom_text(colour = "tomato", alpha = 0.8, size = 4)
library(ggplot2)
ggplot(data = scores, aes(x = PC1, y = PC2, label = rownames(scores))) +
  geom_hline(yintercept = 0, colour = "gray65") +
  geom_vline(xintercept = 0, colour = "gray65") +
  geom_text(colour = "tomato", alpha = 0.8, size = 4)
circle <- function(center = c(0, 0), npoints = 100) {
    r = 1
    tt = seq(0, 2 * pi, length = npoints)
    xx = center[1] + r * cos(tt)
    yy = center[1] + r * sin(tt)
    return(data.frame(x = xx, y = yy))
}
corcir = circle(c(0, 0), npoints = 100)
# create data frame with correlations between variables and PCs
correlations = as.data.frame(cor(USArrests, pca1$x))
# data frame with arrows coordinates
arrows = data.frame(x1 = c(0, 0, 0, 0), y1 = c(0, 0, 0, 0), x2 = correlations$PC1, 
    y2 = correlations$PC2)
# geom_path will do open circles
ggplot() + geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") + 
    geom_segment(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2), colour = "gray65") + 
    geom_text(data = correlations, aes(x = PC1, y = PC2, label = rownames(correlations))) + 
    geom_hline(yintercept = 0, colour = "gray65") + geom_vline(xintercept = 0, 
    colour = "gray65") + xlim(-1.1, 1.1) + ylim(-1.1, 1.1) + labs(x = "pc1 aixs", 
    y = "pc2 axis") + ggtitle("Circle of correlations")
pca1$sdev
head(pca1$rotation)
head(pca1$x)
head(pca1$x)
corcir = circle(c(0, 0), npoints = 100)
pca1$sdev
correlations = as.data.frame(cor(USArrests, pca1$x))
dataset<-read.csv('train_Ox.txt')
library('e1071')
index <-1:nrow(dataset)
testindex<-sample(index,trunc(length(index)*30/100))
testset<-dataset[testindex,]
tuned<-tune.svm(V1~., data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
names(dataset)
tuned<-tune.svm(X.0.20508, data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
tuned<-tune.svm("X.0.20508", data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
help tune.svm
tune.svm
dataset
dataset
dataset | more
dataset
dataset
dataset
quit
trainInput <- read.table("trainx_0.txt",sep=",");
trainOutput <- read.table("trainy_0.txt",sep=",");
library("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput);
help nnet
nnet
nnet?
help("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput,20,rang=0.1,decay=5e-4,maxit=2000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=20,rang=0.1,decay=5e-4,maxit=2000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=40,rang=0.1,decay=5e-4,maxit=2000);
neuralNetworkTest(trainOutput, predict(neuralNetworkModel, trainInput))
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=100,rang=0.1,decay=5e-4,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=40,rang=0.1,decay=5e-4,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=50,rang=0.1,decay=5e-4,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=80,rang=0.1,decay=5e-4,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,rang=0.1,decay=5e-4,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,rang=0.1,decay=5e-6,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,rang=0.1,decay=5e-2,maxit=20000);
predict(neuralNetworkModel, trainInput)
trainOutput
help("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,rang=0.1,decay=5e-2,maxit=20000);
predict(neuralNetworkModel, trainInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,linout=T,skip=T,decay=5e-2,maxit=2000);
predict(neuralNetworkModel, trainInput)
testInput <- read.table("testx_0.txt",sep=",");
predict(neuralNetworkModel, testInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=200,linout=T,skip=T,decay=5e-2,maxit=2000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=100,linout=T,skip=T,decay=5e-2,maxit=2000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,linout=T,skip=T,decay=5e-2,maxit=2000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,linout=T,skip=T,decay=5e-2,maxit=20000);
predict(neuralNetworkModel, testInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=99,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=90,linout=T,skip=T,decay=5e-2,maxit=20000);
summary(neuralNetwork)
summary(neuralNetworkModel)
Resplot(neuralNetworkModel)
Resplot2(neuralNetworkModel)
resplot2(neuralNetworkModel)
summary(neuralNetwork)
predict(neuralNetworkModel, testInput)
predict(neuralNetworkModel, testInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=92,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=93,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=94,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=95,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=96,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=97,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=98,linout=T,skip=T,decay=5e-2,maxit=20000);
neuralNetworkModel<-nnet(trainInput,trainOutput,size=97,linout=T,skip=T,decay=5e-2,maxit=20000);
predict(neuralNetworkModel, testInput)
predict(neuralNetworkModel, testInput)
predict(neuralNetworkModel, trainInput)
library("nnet")
library("bootstrap")
x <- read.table("tr_x_nn.txt",sep=",");
ls
x <- read.table("trainx_nn.txt",sep=",");
y <- read.table("trainy_nn.txt",sep=",");
theta.fit<-function(x,y){nnet(x,y,linout=T,skip=T,size=95,decay=0.0001,maxit=10000)}
theta.predict<-function(fit,x){predict(fit,x)}
results<-crossval(x,y,theta.fit,theta.perdict,ngroups=10)
library("bootstrap")
library("nnet")
results<-crossval(x,y,theta.fit,theta.perdict,ngroups=10)
results<-crossval(x,y,theta.fit,theta.predict,ngroups=10)
theta.fit<-function(x,y){nnet(x,y,linout=T,skip=T,size=95,decay=0.0001,maxit=10000)}
theta.predict<-function(fit,x){predict(fit,x)}
results<-crossval(x,y,theta.fit,theta.predict,ngroups=10)
results<-crossval(x,y,theta.fit,theta.predict,ngroups=10)
results<-crossval(x,y,theta.fit,theta.predict,groups=10)
help("crossval")
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
x
y
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
theta
theta.fit
theta.predict
theta.predict<-function(theta.fit,x){predict(theta.fit,x)}
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
theta.predict<-function(theta.fit,x){predict(theta.fit,x)}
theta.predict
theta.fit
help("crossval")
help("crossval")
theta.fit<-function(x,y){nnet(x,y,linout=T,skip=T,size=95,decay=0.0001,maxit=10000)}
theta.predict<-function(fit,x){predict(fit,x)}
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
x
xx <- read.table("trainx_nn.txt",sep=",");
yy <- read.table("trainy_nn.txt",sep=",");
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=10)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup = 10)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=500)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=1)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=2)
x
y
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=2)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=10)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=1)
results<-crossval(xx,yy,theta.fit,theta.predict,ngroup=10)
xx
yy
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
results<-crossval(x,y,theta.fit,theta.predict,ngroup=100)
results<-crossval(x,y,theta.fit,theta.predict,ngroup=2)
x
y
results<-crossval(x,y,theta.fit,theta.predict,ngroup=2)
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
yy <- read.table("trainy_nn.txt",sep=",");
results<-crossval(x,y,theta.fit,theta.predict,ngroup=10)
size(x)
nrows(x)
nrow(x)
nrow(y)
ncol(y)
ncol(x)
crossval(x,y,theta.fit,theta.predict,ngroup=10)
nrow(x)
nrow(y)
crossval(x,y,theta.fit,theta.predict,ngroup=10)
crossval(x,y,theta.fit,theta.predict,ngroup=2)
crossval(xx,y,theta.fit,theta.predict,ngroup=2)
crossval(xxx,y,theta.fit,theta.predict,ngroup=2)
crossval(xx,y,theta.fit,theta.predict,ngroup=2)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
theta.fit<-function(x,y){nnet(x.x,x.y,linout=T,skip=T,size=95,decay=0.0001,maxit=10000)}
x <- read.table("trainx_nn.txt",sep=",");
y <- read.table("trainy_nn.txt",sep=",");
x.x <- read.table("trainx_nn.txt",sep=",");
x.y <- read.table("trainy_nn.txt",sep=",");
theta.predict<-function(theta.fit,x){predict(theta.fit,x)}
crossval(x.x,x.y,theta.fit,theta.predict,ngroup=10)
library("nnet")
library("crossval")
help("crossval")
library("bootstrap")
crossval(x.x,x.y,theta.fit,theta.predict,ngroup=10)
crossval(x.x,x.y,theta.fit,theta.predict,ngroup=2)
crossval(x.x,x.y,theta.fit,theta.predict,ngroup=2)
results<-crossval(x.x,x.y,theta.fit,theta.predict,ngroup=2)
results
theta.predict<-function(fit,x){predict(fit,x)}
results<-crossval(x.x,x.y,theta.fit,theta.predict,ngroup=2)
results$cv.fit
x.y
sum((x.y - results$cv.fit)^2)
help("crossval")
quit
dataset<-read.csv('train_Ox.txt')
library("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
predict(neuralNetworkModel, trainInput)
trainInput<-read.csv('train_Ox.txt')
trainOutput<-read.csv('train_Oy.txt')
ls
pwd
trainInput<-read.csv('train_Ox.txt')
trainOutput<-read.csv('train_Oy.txt')
trainOutput<-read.csv('train_0y.txt')
trainInput<-read.csv('trainx_0.txt')
trainOutput<-read.csv('trainy_0.txt')
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
testInput<-read.csv('test_Ox.txt')
testInput<-read.csv('test_0x.txt')
testInput<-read.csv('testx_0.txt')
predict(neuralNetworkModel, testInput)
testOutput<-read.csv('testy_0.txt')
preOut<-predict(neuralNetworkModel, testInput)
sum((testOutput - preOut)^2)
(testOutput - preOut)^2
predict(neuralNetworkModel, testInput)
testOutput - preOut
(testOutput - preOut).^2
testOutput - preOut
preOut
testOutput - preOut
predict(neuralNetworkModel, testInput)
testOutput
predict(neuralNetworkModel, testInput)
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
library("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
par(mfrow=c(2,2),mar=c(4,4,0.5,0.5),family='serif')
require(RCurl)
 
root.url<-'https://gist.github.com/fawda123'
raw.fun<-paste(
  root.url,
  '5086859/raw/17fd6d2adec4dbcf5ce750cbd1f3e0f4be9d8b19/nnet_plot_fun.r',
  sep='/'
  )
script<-getURL(raw.fun, ssl.verifypeer = FALSE)
eval(parse(text = script))
rm('script','raw.fun')
install.packages("Rcurl")
78
install.packages("RCurl")
require(RCurl)
library("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
require(RCurl)
root.url<-'https://gist.github.com/fawda123'
raw.fun<-paste(
  root.url,
  '5086859/raw/17fd6d2adec4dbcf5ce750cbd1f3e0f4be9d8b19/nnet_plot_fun.r',
  sep='/'
  )
script<-getURL(raw.fun, ssl.verifypeer = FALSE)
eval(parse(text = script))
rm('script','raw.fun')
par(mar=numeric(4),mfrow=c(1,2),family='serif')
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
library("nnet")
neuralNetworkModel<-nnet(trainInput,trainOutput,size=91,linout=T,skip=T,decay=5e-2,maxit=20000);
summary(nnet)
summary(neuralNetModel)
summary(neuralNetworkModel)
predict(neuralNetworkModel, testInput)
foo=predict(neuralNetworkModel, testInput)
plot(foo)
plot(testOutput)
testOutput<-read.csv('testy_0.txt')
testOutput->write.csv('foob.txt')
testOutput<-write.csv('foob.txt')
write.csv('foob.txt')
write.csv(testOutput,'foob.txt')
testOutput
testOutput<-read.csv('testy_0.txt')
write.csv(testOutput,'foob.txt')
testOutput<-read.csv('testy_0.txt',header=false)
testOutput<-read.csv('testy_0.txt',header=no)
testOutput<-read.csv('testy_0.txt',header='false')
testOutput<-read.csv('testy_0.txt',header=none)
testOutput<-read.csv('testy_0.txt',header=FALSE)
write.csv(testOutput,'foob.txt')
ls
nnet_script
nnet_script.R
quit
